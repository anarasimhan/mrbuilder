{"version":3,"sources":["../src/index.js"],"names":["stringify","str","md","module","exports","source","langMap","query","extensions","highlighter","theme","renderer","xhtmlOut","highlight","lang","trim","lng","resolvedLang","resolved","require","resolve","e","console","log","imports","prelude","cacheable","render"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,YAAY,SAAZA,SAAY,CAACC,GAAD,EAAS;AACvB,QAAIA,OAAO,IAAX,EAAiB;AACb,eAAO,EAAP;AACH;;AAED,WAAO,yBAAeA,GAAf,CAAP;AACH,CAND;;AAQA;AACA,IAAIC,WAAJ;;AAEAC,OAAOC,OAAP,GAAiB,UAAUC,MAAV,EAAkB;;AAE/B,QAAI,CAACH,EAAL,EAAS;AACL,YAAMI,UAAc,KAAKC,KAAL,CAAWC,UAA/B;AACA,YAAMC,cAAc,KAAKF,KAAL,CAAWE,WAA/B;AACA,YAAMC,QAAc,KAAKH,KAAL,CAAWG,KAA/B;AACA,YAAMC,WAAc,wBAApB;;AAEAT,aAAK,0BAAW;AACZU,sBAAW,IADC;AAEZC,uBAAW,mBAAUZ,GAAV,EAAea,IAAf,EAAqB;AAC5BA,uBAAOA,QAAQA,KAAKC,IAAL,EAAR,IAAuB,MAA9B;;AAGA,oBAAMC,MAAeV,QAAQQ,IAAR,KAAiBA,IAAtC;AACA,oBAAMG,uDAAqDR,WAArD,SAAoEO,GAA1E;AACA,oBAAIE,WAAiB,KAArB;AACA,oBAAI;AACAC,4BAAQC,OAAR,CAAgBH,YAAhB;AACAC,+BAAW,IAAX;AACH,iBAHD,CAGE,OAAOG,CAAP,EAAU;AACRC,4BAAQC,GAAR,mCAA4CN,YAA5C;AACH;;AAED,oBAAI,CAACC,QAAL,EAAe;AACX,oEAA6CJ,QACG,QADhD,YAC8D,yBAC1Db,GAD0D,CAD9D;AAGH;AACDU,yBAASa,OAAT,CAAiB,gDAAjB,IACI,gCADJ;AAEAb,yBAASa,OAAT,CAAiB,SAAjB,IACIP,YADJ;AAEAN,yBAASa,OAAT,CAAiB,UAAjB,yCACuCf,WADvC,SACsDC,KADtD;;AAGAC,yBAASc,OAAT,YAA0BzB,UAAUgB,GAAV,CAA1B,sBAA2D,IAA3D;;AAEA,uEAAqDhB,UACjDgB,GADiD,CAArD,WACchB,UAAUC,IAAIc,IAAJ,EAAV,CADd,wBA5B4B,CA6B6B;AACA;AACA;AACA;AAC5D;AAnCW,SAAX,CAAL;;AAuCAb,WAAGS,QAAH,GAAcA,QAAd;AACH;AACD,SAAKe,SAAL,IAAkB,KAAKA,SAAL,EAAlB;AACA,WAAOxB,GAAGyB,MAAH,CAAUtB,MAAV,CAAP;AACH,CAnDD","file":"index.js","sourcesContent":["import Renderer from './markdown';\nimport MarkdownIt from 'markdown-it';\n\nconst stringify = (str) => {\n    if (str == null) {\n        return '';\n    }\n\n    return JSON.stringify(str);\n};\n\n//cache this thing;\nlet md;\n\nmodule.exports = function (source) {\n\n    if (!md) {\n        const langMap     = this.query.extensions;\n        const highlighter = this.query.highlighter;\n        const theme       = this.query.theme;\n        const renderer    = new Renderer();\n\n        md = MarkdownIt({\n            xhtmlOut : true,\n            highlight: function (str, lang) {\n                lang = lang && lang.trim() || 'text';\n\n\n                const lng          = langMap[lang] || lang;\n                const resolvedLang = `react-syntax-highlighter/languages/${highlighter}/${lng}`;\n                let resolved       = false;\n                try {\n                    require.resolve(resolvedLang);\n                    resolved = true;\n                } catch (e) {\n                    console.log(`no language highlighting for ${resolvedLang}`);\n                }\n\n                if (!resolved) {\n                    return `<code className=\"unknown-lang lang-${lang\n                                                                 || 'nolang'}\">{${JSON.stringify(\n                        str)}}</code>`;\n                }\n                renderer.imports['MDhighlighter$, { registerLanguage  as $mdRl} '] =\n                    'react-syntax-highlighter/light';\n                renderer.imports['$mdLang']                                        =\n                    resolvedLang;\n                renderer.imports['$mdStyle']                                       =\n                    `react-syntax-highlighter/styles/${highlighter}/${theme}`;\n\n                renderer.prelude[`$mdRl(${stringify(lng)}, $mdLang);\\n`] = true;\n\n                return `<MDhighlighter$ style={$mdStyle} language={${stringify(\n                    lng)}}>{${stringify(str.trim())}}</MDhighlighter$>`; // use\n                                                                         // external\n                                                                         // default\n                                                                         // escaping\n            }\n        });\n\n\n        md.renderer = renderer;\n    }\n    this.cacheable && this.cacheable();\n    return md.render(source);\n};\n"]}
