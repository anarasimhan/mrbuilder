{"version":3,"sources":["../src/OptionsManager.js"],"names":["split","value","Array","isArray","filter","Boolean","DEFAULT_ALL","OptionsManager","prefix","envPrefix","confPrefix","rcFile","all","env","process","argv","cwd","webpackFilePath","info","console","warn","_require","require","plugins","toUpperCase","toLowerCase","webpackFile","key","def","ret","paths","topPackage","args","NODE_ENV","resolveFromPkgDir","pkg","file","relto","name","resolve","resolveConfig","pluginConfig","envOverride","presets","options","webpack","ignoreRc","newOption","plugin","config","parent","opt","Option","optionsManager","processOpts","override","has","set","map","pluginName","pluginOpts","isLocal","startsWith","localName","forEach","scan","preset","presetName","processEnv","pluginsName","presetsName","length","Error","pluginConf","parts","shift","enabled","get"],"mappings":"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","file":"OptionsManager.js","sourcesContent":["import { join, resolve } from 'path';\nimport {\n    configOrBool, get, info, parseJSON, parseValue, set, warn\n} from 'mrbuilder-dev-utils';\nimport { merge, nameConfig, select } from './util';\n\nconst split = (value = '') => (Array.isArray(value) ? value\n    : value.split(/,\\s*/)).filter(Boolean);\n\nexport const DEFAULT_ALL = ['DEBUG',\n    'ENABLE',\n    'DISABLE',\n    'PLUGINS',\n    'PRESETS',\n    'MODULE_DIR'\n];\n\nexport default class OptionsManager {\n\n    plugins = new Map();\n\n    constructor({\n                    prefix,\n                    envPrefix,\n                    confPrefix,\n                    rcFile,\n                    all = DEFAULT_ALL,\n                    env = process.env,\n                    argv = process.argv,\n                    cwd = process.cwd,\n                    webpackFilePath,\n                    info = console.info || console.warn,\n                    warn = console.warn,\n                    _require = require\n                } = {}) {\n        prefix     = prefix.toUpperCase();\n        envPrefix  = envPrefix || prefix.toUpperCase();\n        confPrefix = confPrefix || prefix.toLowerCase();\n        rcFile     = `.${confPrefix}rc`;\n\n        const webpackFile =\n                  webpackFilePath\n                  || `${envPrefix.toLowerCase()}-webpack.config.js`;\n\n        this.env = (key, def) => {\n            const ret = env[key.toUpperCase()];\n            if (ret === null || ret === void(0)) {\n                return def;\n            }\n            return ret;\n        };\n\n        this.cwd        = (...paths) => resolve(this.env('MODULE_DIR', cwd()),\n            ...paths);\n        this.topPackage = _require(this.cwd('package.json'));\n\n\n        this.warn = (...args) => {\n            warn(`WARN [${prefix.toLowerCase()}]`, ...args);\n\n        };\n\n        this.info = (...args) => {\n            if (this.env(`${envPrefix}_DEBUG`)) {\n                info(`INFO [${prefix.toLowerCase()}]`, ...args);\n            }\n        };\n\n        this.info('NODE_ENV is', env.NODE_ENV);\n\n        const resolveFromPkgDir = (pkg, file, ...relto) => {\n            if (!pkg || this.topPackage.name === pkg) {\n                if (file === 'package.json') {\n                    return this.topPackage;\n                }\n                return this.cwd(file, ...relto);\n            }\n            if (file === 'package.json') {\n                return _require.resolve(join(pkg, file))\n            }\n            return resolve(_require.resolve(join(pkg, 'package.json')), '..',\n                file, ...relto);\n        };\n\n        const resolveConfig = (pkg) => {\n            if (typeof pkg === 'string') {\n                pkg = _require(`${pkg}/package.json`);\n            }\n            const pluginConfig = pkg[confPrefix]\n                                 || parseJSON(\n                    resolveFromPkgDir(pkg.name, rcFile))\n                                 || {};\n\n            const envOverride = pluginConfig.env\n                                && pluginConfig.env[env.NODE_ENV] || {};\n            return {\n                presets : select(envOverride.presets, pluginConfig.presets),\n                options : select(envOverride.options, pluginConfig.options),\n                plugins : select(envOverride.plugins, pluginConfig.plugins),\n                webpack : select(envOverride.webpack, pluginConfig.webpack),\n                ignoreRc: select(envOverride.ignoreRc, pluginConfig.ignoreRc),\n            };\n        };\n\n\n        const newOption = (name, plugin, config, parent) => {\n            if (config === false) {\n                return false;\n            }\n            const opt          = new Option(name, plugin, config, parent);\n            opt.optionsManager = this;\n            return opt;\n        };\n\n        const processOpts = (name, {\n            presets,\n            plugins,\n            ignoreRc,\n            webpack\n        } = {}, options, pkg, parent, override) => {\n            if (this.plugins.has(name)) {\n                return;\n            }\n\n            if (options === false) {\n                this.plugins.set(name, false);\n                return;\n            } else {\n                let plugin;\n                if (webpack) {\n                    plugin = require(resolveFromPkgDir(name,\n                        webpack === true ? webpackFile : webpack));\n                }\n                this.plugins.set(name, newOption(name, plugin, options, pkg));\n            }\n\n            if (plugins) {\n                plugins.map(plugin => {\n                    const [pluginName, pluginOpts] = nameConfig(plugin);\n                    if (pluginOpts === false) {\n                        this.plugins.set(pluginName, false);\n                        return;\n                    }\n                    const isLocal = pluginName.startsWith('.');\n                    if (isLocal) {\n                        const localName = join(name, pluginName);\n                        this.plugins.set(localName,\n                            newOption(localName, require(localName), pluginOpts,\n                                pkg));\n                        return;\n                    }\n                    return [pluginName, override || pluginOpts];\n                }).filter(Boolean).forEach(([pluginName, pluginOpts]) => {\n                    scan(ignoreRc, pkg, pluginName, pluginOpts);\n                })\n            }\n\n            if (presets) {\n                //presets all get the same configuration.\n                presets.forEach(preset => {\n                    const [presetName, config] = nameConfig(preset);\n                    scan(ignoreRc, pkg, presetName, void(0), config)\n                });\n            }\n        };\n        const processEnv  = (prefix = '') => {\n            const pluginsName = `${envPrefix}_${prefix}PLUGINS`;\n            const presetsName = `${envPrefix}_${prefix}PRESETS`;\n            const plugins     = split(this.env(pluginsName, ''));\n            const presets     = split(this.env(presetsName, ''));\n            if ((plugins.length || presets.length)) {\n                this.info('process from env', pluginsName, plugins,\n                    presetsName, presets);\n                processOpts(`${envPrefix}_${prefix}ENV`,\n                    { plugins, presets },\n                    void(0),\n                    this.topPackage);\n            }\n        };\n        const scan        = (ignoreRc, parent, name, options, override) => {\n            this.info('scanning', name);\n\n            const pkg = name === this.topPackage.name ? this.topPackage\n                : _require(`${name}/package.json`);\n            if (Array.isArray(name)) {\n                throw new Error(\n                    `${name} can not be an array import from ${parent\n                                                               && parent.name}`);\n\n            }\n\n            const pluginConf = resolveConfig(pkg);\n\n            options = merge(name, options || pluginConf.options, { env, argv });\n\n            processOpts(name, pluginConf, options, pkg, parent,\n                override);\n        };\n\n\n        processEnv();\n        scan(false, this.topPackage, this.topPackage.name);\n        //ALLOW for fallbacks when tooling wants to signal things.\n        processEnv('INTERNAL_');\n\n    }\n\n\n    config(name, def) {\n        const parts = name.split('.', 2);\n        const key   = parts.shift();\n        if (!this.enabled(key)) {\n            return false;\n        }\n        const config = this.plugins.get(key).config;\n        return get(config, parts.shift(), def);\n    }\n\n    enabled(name) {\n        return !!this.plugins.get(name);\n    }\n\n    //make nice stringify\n    toJSON() {\n        return {\n            name   : this.topPackage.name,\n            plugins: this.plugins\n        }\n    }\n}\n\nclass Option {\n    constructor(name,\n                plugin,\n                config,\n                parent) {\n        this.name   = name;\n        this.plugin = plugin;\n        this.config = config;\n        this.parent = parent;\n    }\n\n    info(...args) {\n        (this.optionsManager || console).info(`- ${this.name}`,\n            ...args);\n    }\n\n    warn(...args) {\n        (this.optionsManager || console).warn(`- ${this.name}`, ...args);\n    }\n\n    toJSON() {\n        return {\n            name  : this.name,\n            plugin: typeof this.plugin === 'function' ? (this.plugin.name\n                                                         || '[function]')\n                : this.plugin,\n            config: this.config,\n            parent: `[${this.parent && this.parent.name}]`\n        }\n    }\n}\n"]}
