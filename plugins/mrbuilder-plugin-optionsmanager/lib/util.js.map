{"version":3,"sources":["../src/util.js"],"names":["select","args","i","l","length","nameConfig","value","Array","isArray","camel","v","idx","toUpperCase","toLowerCase","substring","parse","name","e","console","warn","mergeEnv","plugin","options","process","env","upperPlugin","keys","ret","key","startsWith","keyPart","camelName","split","map","join","mergeArgs","argv","copy","arg","parts","shift","push","splice","merge"],"mappings":"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","file":"util.js","sourcesContent":["import {\n    configOrBool, info, parseJSON, parseValue, set, warn\n} from 'mrbuilder-dev-utils';\n\nexport const select = (...args) => {\n    for (let i = 0, l = args.length; i < l; i++) {\n        if (args[i] !== void(0)) {\n            return args[i];\n        }\n    }\n};\n\n\nexport const nameConfig = (value) => {\n    if (Array.isArray(value)) {\n        return value;\n    }\n    return [value];\n};\n\n\nexport const camel = (v = '', idx) => !v ? v : `${idx > 0 ? v[0].toUpperCase()\n    : v[0].toLowerCase()}${v.substring(1)\n                            .toLowerCase()}`;\n\nexport const parse = (value, name) => {\n    try {\n        return parseValue(value);\n    } catch (e) {\n        console.warn('error parsing \"%s\" in [%s]', value, name);\n        return;\n    }\n};\n\nexport const mergeEnv = (plugin, options = {}, { env } = process) => {\n    if (options === false) {\n        options = {};\n    }\n\n    const upperPlugin = plugin.toUpperCase();\n    const keys        = Object.keys(env);\n    let ret           = Object.assign({}, options);\n    for (let i = 0, l = keys.length; i < l; i++) {\n        const key = keys[i];\n        if (key === upperPlugin) {\n            const value = configOrBool(env[key]);\n            if (value === false) {\n                return false;\n            } else {\n                ret = parse(value, plugin);\n            }\n        }\n        if (key.startsWith(upperPlugin)) {\n            const keyPart   = key.substring(upperPlugin.length + 1);\n            const camelName = keyPart.split('_').map(camel).join('');\n            set(ret, camelName, parse(env[key], plugin));\n        }\n    }\n    return ret;\n};\n\nexport const mergeArgs          = (plugin, options, { argv } = process) => {\n    if (options === false) {\n        options = {};\n    }\n\n    const copy = [];\n    let ret    = Object.assign({}, options);\n\n    for (let i = 2, l = argv.length; i < l; i++) {\n        let arg = argv[i];\n        if (arg.startsWith('--')) {\n            arg = arg.substring(2);\n            if (arg === plugin) {\n                return false;\n            }\n            if (arg.startsWith(plugin)) {\n                const parts = arg.substring(plugin.length + 1).split('=', 2);\n                const key   = parts.shift().split('-').map(camel).join('');\n                set(ret, key, parts[0] ? parse(parts[0], arg) : false);\n                continue;\n            }\n        }\n        copy.push(arg);\n    }\n    argv.splice(2, argv.length, ...copy);\n    return ret;\n};\n/**\n * Merge the env and args into the options.\n * Either a command line or an env variable can override a turned off component.\n *\n * resolution order\n * ENV,\n * ARG,\n * Plugin Options,\n * Options\n *\n *\n * @param plugin\n * @param options\n * @param process\n */\n\n             export const merge = (plugin, options, process) => {\n    if (options === false) {\n        return false;\n    }\n    const ret = mergeArgs(plugin, options, process);\n    if (ret === false) {\n        return false;\n    }\n    return mergeEnv(plugin, ret, process);\n};\n"]}
